import numpy as np
import random
import matplotlib.pyplot as plt
from svgpath2mpl import parse_path
import time


GAME_X = 50
GAME_Y = 50
SENSE = 20
INITIAL_ENERGY = 4
INITIAL_POPULATION = 10
FOOD_PER_STEP = 50
NUM_ITERATIONS = 200

MEAN = 0
SD_SIZE = 0.5
SD_SPEED = 0.5

class Rabbit:
    def __init__(self, speed, size, energy = INITIAL_ENERGY):
        self.speed = speed
        self.size = size
        self.posx = GAME_X * np.random.rand()
        self.posy = GAME_Y * np.random.rand()
        self.energy_consumption = 0.5 * size**3 * speed**2 
        self.energy_level = energy
        self.vision = SENSE
        if(self.energy_consumption > self.energy_level):
            self.energy_level = 0
        if(self.size < 0.1):
            self.energy_level = 0
        if(self.speed**2 > 2500):
            self.energy_level = 0
    
    def mutate(self, energy = INITIAL_ENERGY):
        new_speed = self.speed * 2 ** np.random.normal(MEAN, SD_SPEED, 1)[0]
        new_size  = self.size * 2 ** np.random.normal(MEAN, SD_SIZE, 1)[0]
        if new_speed > np.sqrt(2500) or new_size<0.1:
            energy = 0
        return Rabbit(new_speed, new_size, energy)


class Food:
    def __init__(self):
        self.posx = GAME_X * np.random.rand()
        self.posy = GAME_Y * np.random.rand()
        self.available = True

def isclose(r, x, y, x_target, y_target):
    return r*r >= (x_target - x)**2 + (y_target - y)**2

def new_point(x, y, r):
    angle = np.random.rand() * 2 * np.pi
    dx = r * np.cos(angle)
    dy = r * np.sin(angle)
    newx = max(0, x + dx)
    newx = min(newx, GAME_X)
    newy = max(0, y + dy)
    newy = min(newy, GAME_Y)
    return newx, newy


class Game:
    def __init__(self, food_level, num_rabbits):
        self.rabbits = [Rabbit(1, 1) for i in range(num_rabbits)]
        self.foods = [Food() for i in range(food_level)]

    def clean(self):
        self.rabbits = list(filter(lambda x : x.energy_level > 0, self.rabbits))
        self.rabbits = list(filter(lambda x : x.speed < np.sqrt(2500), self.rabbits))
        self.rabbits = list(filter(lambda x : x.size < np.sqrt(25), self.rabbits))
        self.rabbits = list(filter(lambda x : x.size > 0.1, self.rabbits))
        for f in self.foods:
            if (not f.available):
                f.posx = GAME_X * np.random.rand()
                f.posy = GAME_Y * np.random.rand()
                f.available = True

    def sort(self):
        self.rabbits.sort(key=lambda x: x.posx, reverse=True)

    def reproduce(self):
        new_rabbits = []
        for rabbit in self.rabbits:
            new_speed = rabbit.speed * 2 ** np.random.normal(MEAN, SD_SPEED, 1)[0]
            new_size  = rabbit.size * 2 ** np.random.normal(MEAN, SD_SIZE, 1)[0]
            rabbit.speed = new_speed
            rabbit.size = new_size
            if rabbit.energy_level >= 2 * INITIAL_ENERGY:
                new_rabbit = rabbit.mutate()
                new_rabbits.append(new_rabbit)
                rabbit.energy_level = rabbit.energy_level - INITIAL_ENERGY
        self.rabbits = self.rabbits + new_rabbits
    
    def movement(self):
        planta = 0
        comidos = 0
        self.rabbits.sort(key=lambda x: x.size, reverse=True)
        for r in self.rabbits:
            if r.energy_level <= 0:
                continue
            r.energy_level = r.energy_level - r.energy_consumption
            moved = False
            closex = 1000
            closey = 1000
            closef = Food()
            for f in self.foods:
                if (r.posx - f.posx)**2 + (r.posy - f.posy)**2 < (r.posx - closex)**2 + (r.posy - closey)**2 and f.available:
                    closex = f.posx
                    closey = f.posy
                    closef = f

            for f in self.foods:
                if moved:
                    break
                if  closef.available:
                    ddx = closef.posx - r.posx
                    ddy = closef.posy - r.posy
                    dist = np.sqrt(ddx**2 + ddy**2)
                    prop = 1 if r.speed >= dist else r.speed/dist
                    r.posx, r.posy = r.posx + prop * ddx, r.posy + prop * ddy
                    if(prop == 1):
                        r.energy_level = r.energy_level + 1
                        closef.available = False
                    r = r.mutate(energy = r.energy_level)
                    moved = True
                    break
            if moved:
                continue
            for presa in self.rabbits:
                if isclose(r.vision, r.posx, r.posy, presa.posx, presa.posy):
                    if(r.size**3 >= 2 * presa.size):
                        ddx = presa.posx - presa.posx
                        ddy = presa.posy - presa.posy
                        dist = np.sqrt(ddx**2 + ddy**2)
                        prop = 1 if r.speed >= dist else r.speed/dist
                        r.posx, r.posy = r.posx + prop * ddx, r.posy + prop * ddy
                        if(prop == 1):
                            r.energy_level = r.energy_level + presa.energy_level
                            presa.energy_level = 0
                        r = r.mutate(energy = r.energy_level)
                        moved = True
                        break
            if not moved:        
                r.posx, r.posy = new_point(r.posx, r.posy, r.vision)
                moved = True
                r = r.mutate(energy = r.energy_level)
    


def main():
    popu = input("Enter a number for the initial population: ")
    if popu != '':
        INITIAL_POPULATION = int(popu)
    food = input("Enter a number for the food amount: ")
    if food != '':
        FOOD_PER_STEP = int(food)
    carrot = parse_path("""m 1.258156,32.01557 c -2.03400005,2.607 -1.15300005,5.051 -0.45800005,5.904 1.52000005,2.286 3.61800005,3.695 6.23600005,4.188 0.207,0.039 0.418,0.052 0.627,0.078 -0.27,0.227 -0.529,0.455 -0.773,0.685 -1.757,1.663 -2.6,3.44 -2.505,5.282 0.146,2.819 2.484,4.646 2.584,4.723 l 0.047,0.034 c 4.119,2.797 8.743,-0.588 8.938,-0.734 l 0.176,-0.168 c 0.072,-0.088 0.141,-0.191 0.212,-0.282 0.452,2.319 1.705,4.163 3.73,5.479 0.475,0.38 3.506,2.62 7.043,0.823 0.438,-0.223 0.834,-0.511 1.208,-0.827 1.036,0.293 2.188,0.381 3.33,-0.023 1.552,-0.55 2.568,-1.871 2.718,-3.535 0.16,-1.769 -0.732,-3.482 -2.271,-4.365 -1.409,-0.808 -3.097,-2.304 -4.665,-5.047 0.933,0.064 1.835,-0.035 2.687,-0.342 5.081,-1.825 25.176999,-31.267 28.741999,-40.8279992 0.3,-0.806 0.144,-1.649 -0.409,-2.20300001 -0.367,-0.367 -0.862,-0.56 -1.39,-0.56 -0.267,0 -0.542,0.049 -0.813,0.15 C 46.623156,4.0375708 17.061156,24.03357 15.266156,29.03257 c -0.245,0.683 -0.361,1.399 -0.37,2.136 -2.742,-1.343 -4.192,-2.65 -4.948,-3.688 -1.102,-1.512 -2.879,-2.446 -4.651,-2.446 -0.019,0 -0.038,0 -0.057,0 -1.477,0.017 -2.788,0.695 -3.598,1.86 -1.20400005,1.734 -0.77700005,3.606 -0.135,4.83 -0.085,0.098 -0.173,0.193 -0.249,0.291 z m 1.16,4.732 c -0.114,-0.149 -1.049,-1.483 0.3,-3.347 0.042,0.05 0.086,0.095 0.129,0.144 0.073,0.084 0.146,0.165 0.22,0.247 0.189,0.211 0.379,0.414 0.572,0.609 0.059,0.06 0.118,0.12 0.177,0.178 3.13,3.066 6.698,4.031 9.936,4.031 1.148,0 2.255,-0.121 3.286,-0.31 -0.111,0.05 -0.226,0.1 -0.339,0.149 -0.157,0.069 -0.314,0.138 -0.475,0.206 -0.173,0.073 -0.348,0.144 -0.526,0.214 -0.148,0.059 -0.3,0.116 -0.451,0.173 -0.278,0.104 -0.56,0.205 -0.847,0.301 -0.179,0.06 -0.358,0.12 -0.539,0.175 -0.175,0.054 -0.353,0.105 -0.53,0.155 -0.197,0.055 -0.395,0.106 -0.594,0.155 -0.195,0.048 -0.391,0.095 -0.588,0.137 -0.276,0.059 -0.553,0.111 -0.831,0.155 -0.15,0.024 -0.3,0.044 -0.45,0.063 -1.174,0.152 -2.349,0.167 -3.466,-0.042 -2.096,-0.395 -3.711,-1.484 -4.984,-3.393 z m 12.247,13.89 c -0.582,0.397 -3.809,2.431 -6.496,0.637 -0.179,-0.147 -1.696,-1.45 -1.787,-3.226 -0.063,-1.23 0.57,-2.484 1.883,-3.727 0.769,-0.728 1.705,-1.448 2.783,-2.141 0.133,-0.017 0.265,-0.044 0.398,-0.064 0.28,-0.042 0.559,-0.084 0.836,-0.138 0.192,-0.038 0.38,-0.083 0.57,-0.126 0.219,-0.05 0.437,-0.099 0.653,-0.156 0.201,-0.052 0.399,-0.108 0.597,-0.166 0.199,-0.058 0.396,-0.117 0.592,-0.179 0.203,-0.065 0.404,-0.13 0.603,-0.199 0.179,-0.062 0.354,-0.126 0.529,-0.191 0.206,-0.076 0.412,-0.151 0.613,-0.231 0.136,-0.054 0.267,-0.11 0.401,-0.165 0.869,-0.359 1.678,-0.736 2.403,-1.106 0.01,-0.005 0.022,-0.011 0.032,-0.016 -0.613,1.136 -1.257,2.483 -1.805,3.936 -0.034,0.091 -0.071,0.179 -0.104,0.271 -0.094,0.259 -0.18,0.523 -0.267,0.788 -0.047,0.144 -0.097,0.287 -0.141,0.433 -0.077,0.251 -0.144,0.504 -0.212,0.759 -0.043,0.162 -0.087,0.323 -0.126,0.486 -0.06,0.251 -0.112,0.503 -0.162,0.756 -0.033,0.168 -0.065,0.335 -0.093,0.504 -0.042,0.251 -0.076,0.502 -0.105,0.753 -0.01,0.088 -0.028,0.175 -0.037,0.263 -0.515,0.847 -1.027,1.585 -1.558,2.245 z m 11.506,5.625 c -2.549,1.269 -4.77,-0.552 -4.86,-0.627 -0.035,-0.03 -0.071,-0.057 -0.109,-0.082 -1.609,-1.033 -2.56,-2.422 -2.906,-4.245 -0.148,-0.778 -0.17,-1.594 -0.109,-2.424 l 0.007,-0.09 c 0.13,-1.575 0.579,-3.198 1.149,-4.707 -0.041,0.959 0.005,1.947 0.167,2.941 0.005,0.031 0.012,0.061 0.017,0.091 0.037,0.215 0.078,0.43 0.126,0.646 0.029,0.132 0.063,0.264 0.097,0.395 0.028,0.108 0.056,0.217 0.088,0.325 0.051,0.179 0.106,0.357 0.166,0.535 0.016,0.048 0.034,0.097 0.051,0.145 0.49,1.399 1.266,2.769 2.419,4.049 0.032,0.035 0.064,0.071 0.096,0.106 0.165,0.179 0.334,0.356 0.514,0.53 0.087,0.085 0.18,0.169 0.271,0.253 0.139,0.128 0.275,0.257 0.423,0.382 0.269,0.231 0.55,0.459 0.849,0.682 0.002,0.002 0.009,0.008 0.012,0.01 0.08,0.07 0.256,0.215 0.507,0.403 0.002,10e-4 0.003,0.003 0.005,0.004 0.256,0.191 0.589,0.42 0.985,0.655 0.013,0.009 0.023,0.016 0.035,0.023 z m 4.933,-5.25 c 0.864,0.495 1.364,1.457 1.275,2.45 -0.038,0.415 -0.249,1.424 -1.394,1.829 -0.323,0.115 -0.656,0.164 -0.989,0.164 -0.53,0 -1.06,-0.128 -1.559,-0.313 0,0 -0.002,-10e-4 -0.003,-10e-4 -0.013,-0.005 -0.025,-0.011 -0.038,-0.016 -0.172,-0.065 -0.341,-0.135 -0.503,-0.212 -0.08,-0.038 -0.155,-0.078 -0.233,-0.117 -0.13,-0.067 -0.259,-0.135 -0.379,-0.204 -0.047,-0.027 -0.094,-0.054 -0.139,-0.081 -0.536,-0.323 -0.949,-0.643 -1.152,-0.808 -0.039,-0.033 -0.063,-0.054 -0.068,-0.057 -0.023,-0.021 -0.047,-0.04 -0.072,-0.059 -0.436,-0.323 -0.837,-0.664 -1.21,-1.018 -0.106,-0.101 -0.193,-0.206 -0.293,-0.308 -0.255,-0.26 -0.503,-0.524 -0.726,-0.799 -0.098,-0.121 -0.182,-0.244 -0.272,-0.366 -0.204,-0.276 -0.398,-0.558 -0.571,-0.849 -0.068,-0.114 -0.133,-0.229 -0.195,-0.344 -0.188,-0.347 -0.359,-0.703 -0.504,-1.07 -0.023,-0.057 -0.049,-0.114 -0.071,-0.171 -0.703,-1.876 -0.863,-4.005 -0.467,-6.378 0.275,-1.644 0.779,-3.137 1.257,-4.291 0.169,0.608 0.348,1.182 0.53,1.739 0.03,0.093 0.062,0.182 0.093,0.274 0.17,0.507 0.346,0.994 0.525,1.46 0.031,0.079 0.06,0.159 0.091,0.238 2.152,5.445 4.893,8.062 7.067,9.308 z m -13.956,-21.303 c 0.539,-1.499 4.297,-4.767 9.365,-8.555 0.085,0.035 0.169,0.074 0.266,0.085 1.633,0.179 3.748,1.023 4.792,2.505 0.318,0.452 0.944,0.559 1.394,0.241 0.452,-0.318 0.56,-0.942 0.241,-1.394 -1.109,-1.572 -2.916,-2.526 -4.562,-3.004 3.18,-2.305 6.722,-4.729 10.247,-7.024 0.149,0.131 0.326,0.232 0.538,0.256 1.025,0.112 2.349,0.635 2.994,1.549 0.318,0.451 0.941,0.56 1.394,0.24 0.451,-0.318 0.559,-0.942 0.24,-1.394 -0.734,-1.041 -1.888,-1.696 -2.982,-2.059 6.474,-4.1239992 12.591999,-7.6099992 15.874999,-8.8339992 0.022,-0.008 0.042,-0.014 0.057,-0.02 -0.004,0.017 -0.01,0.037 -0.018,0.059 -0.807,2.164 -2.306,5.08 -4.199,8.3459992 -0.036,-0.036 -0.059,-0.08 -0.101,-0.111 -0.718,-0.527 -1.481,-0.9849992 -2.267,-1.3599992 -0.139,-0.066 -0.286,-0.098 -0.431,-0.098 -0.373,0 -0.731,0.21 -0.903,0.569 -0.237999,0.4989992 -0.027,1.0959992 0.471,1.3329992 0.674,0.322 1.329,0.715 1.947,1.168 0.097,0.071 0.205,0.114 0.314,0.145 -2.341,3.913 -5.151999,8.212 -7.997999,12.302 -0.381,-0.991 -1.01,-1.993 -1.946,-2.654 -0.175,-0.124 -0.376,-0.183 -0.576,-0.183 -0.314,0 -0.623,0.147 -0.818,0.423 -0.318,0.451 -0.211,1.075 0.24,1.394 0.915,0.646 1.437,1.969 1.549,2.995 0.006,0.057 0.035,0.104 0.05,0.158 -2.214,3.111 -4.395,6.021 -6.341,8.453 -0.477,-1.648 -1.432,-3.461 -3.007,-4.572 -0.175,-0.124 -0.376,-0.183 -0.576,-0.183 -0.314,0 -0.624,0.147 -0.818,0.423 -0.318,0.452 -0.211,1.075 0.24,1.394 1.482,1.046 2.326,3.161 2.505,4.792 0.005,0.043 0.028,0.078 0.038,0.119 -2.251,2.678 -4.035,4.473 -4.92,4.791 -0.49,0.176 -0.998,0.264 -1.529,0.264 -0.502,0 -1.026,-0.079 -1.576,-0.237 -0.44,-0.994 -0.842,-2.074 -1.208,-3.224 -0.024,-0.075 -0.048,-0.149 -0.071,-0.225 -0.151,-0.486 -0.294,-0.988 -0.432,-1.499 -0.031,-0.115 -0.063,-0.224 -0.094,-0.341 -0.158,-0.607 -0.309,-1.228 -0.448,-1.868 -0.009,-0.042 -0.03,-0.079 -0.044,-0.12 -0.014,-0.039 -0.024,-0.08 -0.043,-0.117 -0.005,-0.011 -0.009,-0.022 -0.015,-0.033 -0.017,-0.031 -0.041,-0.055 -0.061,-0.083 -0.005,-0.007 -0.01,-0.014 -0.016,-0.021 -0.023,-0.031 -0.042,-0.065 -0.068,-0.093 -0.006,-0.006 -0.01,-0.013 -0.016,-0.019 v 0 c 0,0 -10e-4,0 -10e-4,0 -0.003,-0.003 -0.006,-0.005 -0.009,-0.007 -0.028,-0.028 -0.062,-0.049 -0.094,-0.074 -0.007,-0.006 -0.014,-0.011 -0.021,-0.017 -0.026,-0.02 -0.049,-0.044 -0.077,-0.061 -0.011,-0.007 -0.023,-0.011 -0.035,-0.017 -0.023,-0.013 -0.048,-0.022 -0.072,-0.033 -0.023,-0.01 -0.045,-0.016 -0.068,-0.025 -0.031,-0.011 -0.058,-0.029 -0.09,-0.037 -0.575,-0.146 -1.134,-0.297 -1.68,-0.452 -0.124,-0.035 -0.239,-0.071 -0.36,-0.106 -0.428,-0.124 -0.85,-0.25 -1.259,-0.379 -0.105,-0.033 -0.204,-0.066 -0.307,-0.1 -0.426,-0.138 -0.844,-0.278 -1.247,-0.421 -0.07,-0.025 -0.139,-0.049 -0.208,-0.074 -0.463,-0.167 -0.913,-0.336 -1.344,-0.509 -10e-4,0 -0.002,-10e-4 -0.003,-10e-4 -0.131,-0.845 -0.065,-1.623 0.202,-2.366 z m -13.863,-1.672 c 0.566,-0.815 1.388,-0.995 1.978,-1.001 0.012,0 0.024,0 0.036,0 1.143,0 2.302,0.62 3.034,1.624 1.384,1.898 3.854,3.585 7.34,5.049 0.006,0.003 0.01,0.009 0.017,0.012 0.039,0.016 0.081,0.031 0.12,0.047 0.303,0.126 0.62,0.249 0.939,0.371 0.276,0.106 0.556,0.211 0.843,0.315 0.292,0.105 0.586,0.21 0.891,0.313 0.418,0.142 0.851,0.279 1.29,0.415 0.165,0.051 0.315,0.105 0.483,0.155 -0.081,0.032 -0.173,0.063 -0.257,0.095 -0.03,0.008 -0.061,0.001 -0.09,0.011 -3.12,1.138 -8.458,2.239 -13.087,-0.973 -0.239,-0.167 -0.474,-0.359 -0.709,-0.55 -0.113,-0.091 -0.228,-0.169 -0.34,-0.266 -0.71,-0.617 -1.399,-1.35 -2.056,-2.213 l -0.127,-0.169 c -0.004,-0.005 -0.01,-0.007 -0.013,-0.012 -0.34,-0.465 -1.212,-1.899 -0.292,-3.223 z""")
   
    carrot.vertices -= carrot.vertices.mean(axis=0)


    smiley = parse_path(""""m 347.64443,921.20355 c -6.883,-57.336 -2.6723,-121.13 -35.926,-170.34 -17.542,-13.456 -62.225,-56.831 -57.208,-52.071 18.748,44.024 77.104,55.949 75.103,110.81 8.1597,36.772 13.133,74.222 18.031,111.6 z m -258.189997,-346.34 c 25.171997,-3.8064 43.673997,-44.382 41.885997,-55.706 -7.3239,23.655 -23.896,40.531 -41.885997,55.706 z m 628.479997,-236.06 c -1.779,-20.66 -55.921,-56.37 -25.998,-18.91 10.007,4.34 20.943,7.66 25.998,18.91 z m -45.023,12.577 c -2.8411,44.7 70.653,30.773 46.861,-9.6744 3.9793,28.688 -30.631,43.155 -39.51,12.577 l -7.3507,-2.9023 z m 2.7565,-119.96 c -2.3865,-41.699 53.947,-63.222 33.186,-105.86 -30.943,-17.882 -76.078,-10.378 -107.03,7.3432 -8.2848,15.315 34.813,45.901 17.566,7.9225 13.758,-23.693 80.078,-38.098 87.155,2.7965 -4.2562,31.694 -41.913,53.324 -30.874,87.795 z m -66.156,-29.023 c 10.25,-14.102 19.063,-25.796 7.1236,-2.7267 -2.8604,5.3701 -2.6104,10.988 -7.1236,2.7267 z m -207.66,-3.8698 c -0.10805,-20.197 -48.73,-38.927 -5.714,-23.46 10.022,3.2245 8.1687,66.87 5.714,23.46 z m 79.224,-1.8175 c -17.476,-47.579 -73.365,-51.482 -114.64,-45.424 -21.664,-0.32891 -33.078,2.7175 -5.9334,9.5109 35.39,9.8535 77.152,-21.652 104.05,19.24 5.7071,5.3332 11.227,10.89 16.525,16.673 z m 105.46,21.166 c -52.091,-14.482 -108.47,-26.319 -160.45,-4.6811 -18.44,8.6743 -86.769,-6.6037 -35.108,6.6811 39.866,10.145 76.69,-23.706 117.45,-13.609 23.992,15.492 51.022,13.599 78.101,11.609 z m 85.462,23.21 c -16.225,-37.805 -66.334,-46.794 -89.592,-10.471 -28.99,35.062 -25.359,85.807 -25.263,129.47 5.7022,-48.939 3.6284,-108.83 47.171,-140.06 20.745,-21.153 53.474,3.4394 67.684,21.061 z m -358.35,316.36 c 26.633,-38.951 76.761,-14.479 114.86,-20.082 53.729,0.18419 114.27,-4.9813 156.34,-44.029 38.69,-41.413 79.154,-88.349 83.171,-149.35 2.4552,-26.699 23.629,-74.632 5.0694,-86.287 3.5256,63.348 -14.314,130.19 -60.674,173.36 -22.343,26.773 -29.813,68.139 -68.135,77.049 -45.879,26.301 -100.76,25.525 -149.82,10.855 -27.955,4.0489 -68.894,6.3497 -80.81,38.485 z m 33.078,-185.75 c 3.8182,-37.825 45.265,-65.234 30.347,-105.17 -13.655,-50.865 -50.914,-91.342 -58.831,-144.43 0.4057,-45.736998 -66.402,-36.230998 -77.402,-40.445998 21.81,1.95 44.821,-0.094 65.905,4.2674 32.855,24.738998 15.67,76.714998 47.536,106.209998 6.9482,40.395 59.634,73.978 32.308,116.53 -15.362,19.857 -32.587,37.348 -39.862,63.036 z m -121.29,-118.03 c 0.70143,-42.665 0.30714,-84.337 -29.941,-115.4 -26.344,-31.299 46.398,-25.741 23.943,-17.394 -48.709,-3.6859 1.676,49.392 16.105,65.076 4.2605,22.855 -3.6789,46.167 -10.107,67.721 z m -117.61,203.16 c 9.4695,-36.014 34.54,-65.621 37.672,-103.52 11.797,-42.405 43.455,-77.827 81.651,-94.839 25.707,-24.103 50.175,-65.14 30.448,-101.55 -12.467,-18.843 -52.034,-58.286998 -24.809,-75.459998 -14.667,34.527998 32.45,67.327998 36.754,103.519998 1.2462,33.461 -19.368,75.797 -52.418,83.633 -29.313,24.19 -55.311,58.737 -69.692,95.178 -8.1985,32.848 -22.838,64.132 -39.605,93.04 z m 178.81,54.45 c -44.497,-4.2194 -60.999,-58.973 -106.78,-57.263 -17.486,-8.0092 -65.897,5.9 -68.718,11.967 36.328,-12.991 79.046,-17.746 110.81,10.008 16.987,20.464 39.093,32.335 64.69,35.288 z m -1.2994,120.4 c 12.148,-34.838 35.277,-72.496 16.243,-110.14 13.036,40.451 -14.143,71.135 -16.243,110.14 z m -265.079997,-68.408 c -11.2020002,-35.178 3.7535,-93.91 47.429,-86.879 -38.743,1.4054 -54.588,46.163 -47.429,86.879 z m 24.689,-45.15 c 2.4701,-42.009 73.334997,-69.767 89.020997,-26.3 3.7224,18.608 2.3143,34.275 -3.258,6.4616 -9.4696,-43.394 -72.235997,-23.093 -81.565997,11.65 l -2.2264,4.2318 -1.9702,3.9568 z m 12.99,36.26 c -4.2188,-15.197 -16.913,-44.427 -22.74,-15.734 -13.973,21.717 2.3182,28.987 2.8756,0.60572 7.4118,-0.36253 6.6809,24.037 19.865,15.128 z m 134.489997,69.78 c -24.268,21.52 -48.605,-1.794 -46.555,-29.035 0.30079,-9.3188 56.727,-7.4693 46.223,25.884 l 0.24174,2.2906 0.0908,0.86038 z m -70.819,80.722 c -43.201997,-14.292 -84.890997,-48.194 -81.629997,-100.75 -3.7943,-15.514 -31.3080002,-51.742 -5.5141,-19.827 15.121,36.903 19.906,86.563 60.515,106.37 8.654197,5.1775 17.564997,9.8761 26.629997,14.203 z m 242.99,227.8 c 25.415,-56.737 7.7583,-123.68 -15.628,-177.76 -12.96,-33.069 -45.755,-50.476 -59.74,-82.187 13.773,-19.31 -18.29,-44.873 -11.362,-15.432 8.7537,22.412 25.288,48.91 46.241,68.101 46.6,55.559 57.402,136.92 40.488,207.28 z m -263.14,-24.627 c 27.434,-53.628 37.779,-115.57 40.977,-175.79 3.1467,-19.457 -27.096,-34.082 1.2549,-15.75 8.13,32.197 -2.1381,66.874 -7.1827,99.22 -7.4559,32.445 -11.338,67.597 -35.049,92.324 z m 105.26,-119.71 c -3.7907,43.752 -26.968,81.963 -60.729,107.08 -17.945,11.8 -54.559997,68.89 -67.675997,39.261 -3.1839,-24.473 33.914997,-31.388 10.99,-6.3001 -22.531,34.387 30.464997,-7.4727 34.900997,-21.012 31.459,-22.909 58.392,-52.983 71.372,-91.55 3.8901,-9.0796 7.6122,-18.24 11.142,-27.481 z m -16.243,-76.617 c 17.213,31.902 15.864,73.212 23.155,109.5 0.60121,13.697 24.361,54.359 8.9119,18.997 -13.304,-41.835 -10.159,-90.586 -27.519,-129.18 -0.18011,-0.70874 -14.292,-3.2205 -4.548,0.68408 z m 51.328,-56.779 c -16.724,32.457 -34.867,66.99 -26.448,105.7 5.778,42.764 10.198,87.027 25.896,127.19 19.922,33.893 46.755,82.137 91.503,72.54 18.288,-2.7402 42.119,-40.692 10.404,-16.755 -37.144,21.138 -76.296,-15.696 -92.26,-49.254 -29.14,-51.916 -22.904,-113.74 -18.192,-171.02 -1.8509,-26.26 51.728,-78.11 16.058,-87.737 -7.952,4.0068 -8.6249,11.244 -6.9624,19.329 z""")          
    smiley.vertices -= smiley.vertices.mean(axis=0)

    
    game = Game(FOOD_PER_STEP, INITIAL_POPULATION)
    print("Initial state ")
    print("Population: ", len(game.rabbits))
    i = 1
    pop = len(game.rabbits)

    fig, axs = plt.subplots(2, 2)
    fig.suptitle('Natural Selection Simulation')
    its = np.array([0])
    speeds = np.array([1.0])
    sizes = np.array([1.0])
    pops = np.array([INITIAL_POPULATION])

    xc = np.array([r.posx for r in game.rabbits])
    yc = np.array([r.posy for r in game.rabbits])
    ss = np.array([r.size for r in game.rabbits])

    xp = np.array([r.posx for r in game.foods])
    yp = np.array([r.posy for r in game.foods])

    axs[0][0].title.set_text("\n\nDistribution")
    axs[0][0].scatter(xc, yc, s=ss*200, color='black', marker=smiley)
    axs[0][0].scatter(xp, yp, s=50.0, marker=carrot, color = 'orange')
    axs[0][0].set_facecolor('mediumseagreen') 
    axs[0][0].set_xlim([0, GAME_X])
    axs[0][0].set_ylim([0, GAME_Y])

    axs[0][1].plot(its, speeds, 'b')
    axs[0][1].set_xlim([0, 100])
    axs[0][1].set_xlabel('Iterations')
    axs[0][1].set_ylabel('Avg. speed')
    axs[0][1].set_ylim([0, 3])
    
    axs[1][0].plot(its, sizes, 'g')
    axs[1][0].set_xlim([0, 100])
    axs[1][0].set_ylim([0, 5])
    axs[1][0].set_xlabel('Iterations')
    axs[1][0].set_ylabel('Avg. size')

    axs[1][1].plot(its, pops, 'r')
    axs[1][1].set_xlim([0, 100])
    axs[1][1].set_ylim([0, 500])
    axs[1][1].set_xlabel('Iterations')
    axs[1][1].set_ylabel('Population')
    plt.draw()


    while True > 0: 
        if len(game.rabbits) == 0:
            plt.pause(0.1)
            continue
        plt.pause(0.1)
        game.movement()
        game.clean()
        game.reproduce()
        game.clean()
        print("Iteration #", i)
        sum_speed = 0
        sum_size = 0
        sum_energy = 0
        for r in game.rabbits:
            sum_speed += r.speed
            sum_size += r.size
            sum_energy += r.energy_level
        its = np.append(its, i)
        speeds = np.append(speeds,  sum_speed/pop)
        sizes = np.append(sizes,  sum_size/pop)
        pops = np.append(pops, pop)
        xc = np.array([r.posx for r in game.rabbits])
        yc = np.array([r.posy for r in game.rabbits])
        ss = np.array([r.size for r in game.rabbits])
        xp = np.array([r.posx for r in game.foods])
        yp = np.array([r.posy for r in game.foods])
        print("    Population: {}  Avg. speed: {:.4f}   Avg. size: {:.4f}  Avg. energy: {:.4f}".format(pop, sum_speed/pop, sum_size/pop, sum_energy/pop))
        print("        SD. speed: {:.4f}  SD. sizes: {:.4f}".format(np.std(speeds), np.std(sizes)))
        axs[0][0].clear()
        axs[0][0].scatter(xc, yc, s=ss*200.0, color='black', marker=smiley)
        axs[0][0].scatter(xp, yp, s=50.0, marker=carrot, color = 'orange')
        axs[0][0].set_xticklabels([])
        axs[0][0].set_yticklabels([])       

        axs[0][1].plot(its, speeds, 'b')
        axs[0][1].set_xlim([0, max(NUM_ITERATIONS, i+10)])
        axs[0][1].set_ylim([0, max(3, max(speeds) + 1)])

        axs[1][0].plot(its, sizes, 'g') 
        axs[1][0].set_xlim([0, max(NUM_ITERATIONS, i+10)])
        axs[1][0].set_ylim([0, max(3, max(sizes) + 1)])

        axs[1][1].plot(its, pops, 'r')
        axs[1][1].set_xlim([0, max(NUM_ITERATIONS, i+10)])
        axs[1][1].set_ylim([0, max(10, max(pops) + 100)])
        plt.draw()
        if i == 1:
            time.sleep(1)
        i +=1
        pop = len(game.rabbits)
    


        
if __name__ == "__main__":
    main()